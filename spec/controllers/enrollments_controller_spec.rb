require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EnrollmentsController, type: :controller do
  let(:enrollment) { FactoryGirl.create(:enrollment) }

  let(:valid_attributes) do
    enrollment.attributes
  end

  let(:invalid_attributes) do
    { agreement: false }
  end

  describe 'GET #index' do
    it 'returns a success response' do
      get :index

      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: enrollment.to_param }

      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Enrollment' do
        valid_attributes
        expect do
          post :create, params: { enrollment: valid_attributes }
        end.to change(Enrollment, :count).by(1)
      end

      it 'renders a JSON response with the new enrollment' do
        post :create, params: { enrollment: valid_attributes }

        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(enrollment_url(Enrollment.last))
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the new enrollment' do
        post :create, params: { enrollment: invalid_attributes }

        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        { scopes: { tax_adress: true } }
      end

      it 'updates the requested enrollment' do
        put :update, params: { id: enrollment.to_param, enrollment: new_attributes }

        enrollment.reload
        expect(enrollment.scopes['tax_adress']).to be_truthy
      end

      it 'renders a JSON response with the enrollment' do
        put :update, params: { id: enrollment.to_param, enrollment: valid_attributes }

        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the enrollment' do
        put :update, params: { id: enrollment.to_param, enrollment: invalid_attributes }

        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested enrollment' do
      enrollment

      expect do
        delete :destroy, params: { id: enrollment.to_param }
      end.to change(Enrollment, :count).by(-1)
    end
  end
end
